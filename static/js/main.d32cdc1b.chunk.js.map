{"version":3,"sources":["api/api.js","CreateControls.js","Pagination.js","App.js","index.js"],"names":["getPosts","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","posts","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","stop","apply","this","arguments","CreateControls","props","controls","pageCount","page","setCurrentPage","_loop","i","activeClassName","push","react_default","createElement","key","type","disabled","onClick","className","Pagination","state","_this","onSelectChange","value","_this$props","total","setPageCountItems","target","Math","ceil","setState","_this$props2","perPage","_this2","_this$state","_this$props3","onChange","src_CreateControls","num","changePage","React","Component","App","current","onPageChange","loadData","then","postsData","upperLimit","slice","_this$state2","createPaginatedData","map","child","id","title","body","length","src_Pagination","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d32cdc1b.chunk.js","sourcesContent":["const baseUrl = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = async() => {\n  const url = '/posts';\n  const response = await fetch(`${baseUrl}${url}`);\n  const posts = await response.json();\n\n  return posts;\n};\n\nexport default getPosts();\n","import React from 'react';\n\nconst CreateControls = (props) => {\n  const controls = [];\n  const { pageCount, page, setCurrentPage } = props;\n\n  for (let i = 1; i <= pageCount; i += 1) {\n    const baseClassName = 'pagination-controls__button';\n    const activeClassName = i === page\n      ? `${baseClassName}--active`\n      : '';\n\n    if (i === 1) {\n      controls.push(\n        <button\n          key=\"lowerPage\"\n          type=\"button\"\n          disabled={i === page}\n          onClick={() => setCurrentPage(page - 1)}\n        >\n          {`<`}\n        </button>\n      );\n    }\n\n    if (i === 1 && page > 2) {\n      controls.push(\n        <button\n          key=\"first\"\n          type=\"button\"\n          disabled={i === page}\n          onClick={() => setCurrentPage(1)}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    if (i === 1 && page > 2) {\n      controls.push(`...`);\n    }\n\n    if (i === page || i === page - 1 || i === page + 1) {\n      controls.push(\n        <button\n          key={i}\n          type=\"button\"\n          className={`${baseClassName} ${activeClassName}`}\n          disabled={i === page}\n          onClick={() => setCurrentPage(i)}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    if (i === pageCount && page < pageCount - 1) {\n      controls.push(`...`);\n    }\n\n    if (i === pageCount && page < pageCount - 1) {\n      controls.push(\n        <button\n          key=\"last\"\n          type=\"button\"\n          disabled={i === page}\n          onClick={() => setCurrentPage(pageCount)}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    if (i === pageCount) {\n      controls.push(\n        <button\n          key=\"upperPage\"\n          type=\"button\"\n          disabled={i === page}\n          onClick={() => setCurrentPage(page + 1)}\n        >\n          {`>`}\n        </button>\n      );\n    }\n  }\n\n  return controls;\n};\n\nexport default CreateControls;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport CreateControls from './CreateControls';\n\nclass Pagination extends React.Component {\n  state = {\n    page: this.props.page,\n  };\n\n  componentDidMount() {\n    const { total, perPage } = this.props;\n    let pageCount = total / perPage;\n\n    if (total % perPage > 0) { pageCount += 1; }\n\n    this.setState({\n      pageCount,\n    });\n  }\n\n  onSelectChange = (value) => {\n    const { total, setPageCountItems } = this.props;\n    const perPage = +value.target.value;\n    let pageCount = total / perPage;\n\n    pageCount = Math.ceil(pageCount);\n\n    this.setState({\n      pageCount,\n      page: 1,\n    });\n    setPageCountItems(+value.target.value);\n  };\n\n  // setCurrentPage(num) {\n  //   this.setState({\n  //     page: num,\n  //   });\n  //   this.props.changePage(num);\n  // }\n\n  render() {\n    const { page, pageCount } = this.state;\n    const { perPage, total } = this.props;\n\n    return (\n      <div className=\"pagination\">\n        <select\n          onChange={this.onSelectChange}\n          value={perPage}\n        >\n          <option value={3}>3</option>\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={15}>15</option>\n        </select>\n        <div className=\"pagination-controls\">\n          {\n            <CreateControls\n              pageCount={pageCount}\n              page={page}\n              setCurrentPage={(num) => {\n                this.setState({\n                  page: num,\n                });\n                this.props.changePage(num);\n              }}\n            />\n          }\n        </div>\n        <span>\n          {\n            `${page * perPage - perPage + 1}\n             - ${page * perPage <= total ? page * perPage : total\n      } of ${total}`\n          }\n        </span>\n      </div>\n    );\n  }\n}\n\nPagination.propTypes = {\n  total: propTypes.number.isRequired,\n  changePage: propTypes.func.isRequired,\n  setPageCountItems: propTypes.func.isRequired,\n  perPage: propTypes.number.isRequired,\n  page: propTypes.number.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport './App.css';\nimport { getPosts } from './api/api';\nimport Pagination from './Pagination';\n\nclass App extends React.Component {\n  state = {\n    posts: [],\n    current: 1,\n    perPage: 5,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onPageChange = (num) => {\n    this.setState({\n      current: num,\n    });\n  };\n\n  setPageCountItems = (perPage) => {\n    this.setState({\n      perPage,\n      current: 1,\n    });\n  };\n\n  async loadData() {\n    await getPosts()\n      .then((postsData) => {\n        this.setState({\n          posts: postsData,\n        });\n      });\n  }\n\n  createPaginatedData() {\n    const { current, perPage, posts } = this.state;\n    const upperLimit = current * perPage;\n\n    return posts.slice((upperLimit - perPage), upperLimit);\n  }\n\n  render() {\n    const { posts, current } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"table_container\">\n          <table className=\"table\">\n            <thead />\n            <tbody>\n              {\n                this.createPaginatedData().map(child => (\n                  <tr>\n                    <td>{child.id}</td>\n                    <td>{child.title}</td>\n                    <td>{child.body}</td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </table>\n        </div>\n        <nav className=\"nav\">\n          {\n            posts.length\n              ? (\n                <Pagination\n                  total={posts.length}\n                  page={current}\n                  perPage={this.state.perPage}\n                  changePage={this.onPageChange}\n                  setPageCountItems={this.setPageCountItems}\n                />\n              )\n              : []\n          }\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}